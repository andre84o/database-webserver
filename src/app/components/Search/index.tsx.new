"use client";

import React, { useState, useEffect, useRef } from "react";
import { usePathname } from "next/navigation";
import { Search } from "lucide-react";
import { useQuery } from "@tanstack/react-query";
import { getSearchPosts } from "@/utils/supabase/queries";
import Link from "next/link";

function useDebouncedValue<T>(value: T, ms = 200) {
  const [debounced, setDebounced] = useState<T>(value);
  useEffect(() => {
    const id = setTimeout(() => setDebounced(value), ms);
    return () => clearTimeout(id);
  }, [value, ms]);
  return debounced;
}

export default function SearchInput(): React.ReactElement {
  const [userInput, setUserInput] = useState("");
  const debounced = useDebouncedValue(userInput, 250);
  const containerRef = useRef<HTMLDivElement | null>(null);
  const inputRef = useRef<HTMLInputElement | null>(null);

  const [isMobile, setIsMobile] = useState(false);
  const [open, setOpen] = useState(false);
  const pathname = usePathname();
  const isHome = pathname === "/";

  const { data, refetch } = useQuery({
    queryKey: ["search-results", debounced],
    queryFn: async () => {
      const term = String(debounced ?? "").trim();
      const { data, error } = await getSearchPosts(term);
      if (error) throw error;
      return data ?? [];
    },
    enabled: Boolean(debounced && String(debounced).trim().length >= 2),
  });

  const results = data ?? [];
  const ITEM_HEIGHT = 72;

  useEffect(() => {
    const mq = window.matchMedia("(max-width: 767px)");
    const update = () => setIsMobile(mq.matches);
    update();
    try {
      mq.addEventListener?.("change", update);
    } catch {
      (mq as any).addListener?.(update);
    }
    return () => {
      try {
        mq.removeEventListener?.("change", update);
      } catch {
        (mq as any).removeListener?.(update);
      }
    };
  }, []);

  useEffect(() => {
    function onDocClick(e: MouseEvent) {
      const target = e.target as Node;
      if (containerRef.current && containerRef.current.contains(target)) return;
      setOpen(false);
    }
    document.addEventListener("click", onDocClick);
    return () => document.removeEventListener("click", onDocClick);
  }, []);

  const excerpt = (s: string | null | undefined, n = 18) => {
    if (!s) return "";
    const words = String(s).split(/\s+/).filter(Boolean);
    return words.length <= n ? words.join(" ") : words.slice(0, n).join(" ") + "...";
  };

  const dropdown = (
    <div className="mt-2 w-full shadow-lg">
      {debounced && debounced.trim().length < 2 ? (
        <div className="bg-white border rounded-md p-3 text-sm text-neutral-500">Skriv minst 2 tecken för att söka</div>
      ) : null}

      {results && results.length > 0 && (
        <div className="bg-white border rounded-md overflow-hidden">
          <div style={{ maxHeight: isMobile ? ITEM_HEIGHT * 2 : ITEM_HEIGHT * 3, overflowY: 'auto' }}>
            {results.map((r: any) => (
              <Link
                href={`/${r.slug}`}
                key={r.slug}
                className="block p-3 hover:bg-slate-50 border-b last:border-b-0"
                onClick={() => setOpen(false)}
                style={{ minHeight: ITEM_HEIGHT }}
              >
                <div className="font-medium text-sm text-neutral-900">{r.title}</div>
                <div className="text-xs text-neutral-600">{excerpt(r.content, 18)}</div>
                <div className="text-xs text-neutral-500 mt-1">{r.users?.username ?? 'Unknown'}</div>
              </Link>
            ))}
          </div>
        </div>
      )}

      {results && results.length === 0 && debounced && (
        <div className="bg-white border rounded-md p-3 text-sm text-neutral-500">Inga träffar</div>
      )}
    </div>
  );

  return (
    <div className="relative" ref={containerRef}>
      {!isMobile && (
        <div className="flex items-center gap-2 bg-white border rounded-xl px-3 py-2 shadow-sm">
          <Search size={18} className="text-neutral-500" />
          <input
            ref={inputRef}
            value={userInput}
            onChange={(e) => setUserInput(e.target.value)}
            onFocus={() => setOpen(true)}
            className="border-0 outline-none p-0 w-full text-sm"
            name="search"
            placeholder="Search posts"
          />
          <button
            aria-label="Sök"
            onClick={async () => {
              setOpen(true);
              try {
                await (refetch ? refetch() : Promise.resolve());
              } catch {}
            }}
            className="ml-2 inline-flex items-center justify-center px-3 py-2 rounded-md bg-[#735BFD] text-white text-sm font-medium hover:bg-[#9C8BFF] transition"
          >
            <Search size={16} />
          </button>
        </div>
      )}

      {!isMobile && open && <div className="absolute left-0 z-50 mt-2 w-full max-w-[90vw] sm:max-w-md">{dropdown}</div>}

      {/* Mobile inline handled by MobileSearchInline component */}
    </div>
  );
}

export function MobileSearchInline(): React.ReactElement {
  const [userInput, setUserInput] = useState("");
  const debounced = useDebouncedValue(userInput, 250);
  const inputRef = useRef<HTMLInputElement | null>(null);
  const containerRefMobile = useRef<HTMLDivElement | null>(null);
  const [openMobile, setOpenMobile] = useState(false);

  const { data, refetch } = useQuery({
    queryKey: ["search-results-mobile", debounced],
    queryFn: async () => {
      const term = String(debounced ?? "").trim();
      const { data, error } = await getSearchPosts(term);
      if (error) throw error;
      return data ?? [];
    },
    enabled: Boolean(debounced && String(debounced).trim().length >= 2),
  });

  const results = data ?? [];
  const ITEM_HEIGHT = 72;

  useEffect(() => {
    function onDocClick(e: MouseEvent) {
      const target = e.target as Node;
      if (containerRefMobile.current && containerRefMobile.current.contains(target)) return;
      setOpenMobile(false);
    }
    document.addEventListener("click", onDocClick);
    return () => document.removeEventListener("click", onDocClick);
  }, []);

  const excerpt = (s: string | null | undefined, n = 18) => {
    if (!s) return "";
    const words = String(s).split(/\s+/).filter(Boolean);
    return words.length <= n ? words.join(" ") : words.slice(0, n).join(" ") + "...";
  };

  return (
    <div ref={containerRefMobile} className="block md:hidden w-[90%] mx-auto mt-8">
      <div className="flex items-center gap-2 bg-white border rounded-xl px-3 py-2 shadow-sm">
        <Search size={18} className="text-neutral-500" />
        <input
          ref={inputRef}
          value={userInput}
          onChange={(e) => setUserInput(e.target.value)}
          onFocus={() => setOpenMobile(true)}
          className="border-0 outline-none p-0 w-full text-sm"
          name="search"
          placeholder="Sök i inlägg"
        />
        <button
          aria-label="Sök"
          onClick={async () => {
            setOpenMobile(true);
            try {
              await (refetch ? refetch() : Promise.resolve());
            } catch {}
          }}
          className="ml-2 inline-flex items-center justify-center px-3 py-2 rounded-md bg-[#735BFD] hover:bg-[#9C8BFF] text-white text-sm font-medium transition"
        >
          <Search size={16} />
        </button>
      </div>

      {openMobile && (
        <div className="mt-2 w-full">
          {debounced && debounced.trim().length < 2 ? (
            <div className="bg-white border rounded-md p-3 text-sm text-neutral-500">Skriv minst 2 tecken för att söka</div>
          ) : null}

          {results && results.length > 0 && (
            <div className="bg-white border rounded-md overflow-hidden">
              <div style={{ maxHeight: ITEM_HEIGHT * 2, overflowY: 'auto' }}>
                {results.map((r: any) => (
                  <Link
                    href={`/${r.slug}`}
                    key={r.slug}
                    className="block p-3 hover:bg-slate-50 border-b last:border-b-0"
                    onClick={() => setOpenMobile(false)}
                    style={{ minHeight: ITEM_HEIGHT }}
                  >
                    <div className="font-medium text-sm text-neutral-900">{r.title}</div>
                    <div className="text-xs text-neutral-600">{excerpt(r.content, 18)}</div>
                    <div className="text-xs text-neutral-500 mt-1">{r.users?.username ?? 'Unknown'}</div>
                  </Link>
                ))}
              </div>
            </div>
          )}

          {results && results.length === 0 && debounced && (
            <div className="bg-white border rounded-md p-3 text-sm text-neutral-500">Inga träffar</div>
          )}
        </div>
      )}
    </div>
  );
}
*** End Patch